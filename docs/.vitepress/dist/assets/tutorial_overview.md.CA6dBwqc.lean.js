import{_ as s,c as n,a0 as l,o as i}from"./chunks/framework.p2VkXzrt.js";const d=JSON.parse('{"title":"Amadeus System 系统概述","description":"","frontmatter":{},"headers":[],"relativePath":"tutorial_overview.md","filePath":"tutorial_overview.md"}'),p={name:"tutorial_overview.md"};function e(t,a,o,r,c,u){return i(),n("div",null,a[0]||(a[0]=[l(`<h1 id="amadeus-system-系统概述" tabindex="-1">Amadeus System 系统概述 <a class="header-anchor" href="#amadeus-system-系统概述" aria-label="Permalink to &quot;Amadeus System 系统概述&quot;">​</a></h1><p>本项目脱胎于《命运石之门 0》中的 Amadeus System，是一个多模态的 AI 角色扮演系统。通过整合最先进的 AI 技术，致力于将虚拟角色完美还原为可交互的数字形态。无论是动漫角色、游戏人物，还是其他任何你梦想中的角色，都将可以通过本系统实现真实的对话和情感交互。</p><h2 id="项目愿景" tabindex="-1">项目愿景 <a class="header-anchor" href="#项目愿景" aria-label="Permalink to &quot;项目愿景&quot;">​</a></h2><p>通过结合语音识别、自然语言处理、情感分析等多项 AI 技术，我们打造了一个能够：</p><ul><li>精确还原角色性格和说话方式</li><li>实现自然流畅的实时对话</li><li>具备情感理解和表达能力</li><li>持续学习和记忆与用户的互动</li></ul><h2 id="系统架构" tabindex="-1">系统架构 <a class="header-anchor" href="#系统架构" aria-label="Permalink to &quot;系统架构&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>                     +----------------------+</span></span>
<span class="line"><span>                     |      客户端          |</span></span>
<span class="line"><span>                     | (用户界面/交互层)     |</span></span>
<span class="line"><span>                     +----------+-----------+</span></span>
<span class="line"><span>                                ↕</span></span>
<span class="line"><span>                     +----------+-----------+</span></span>
<span class="line"><span>                     |  WebSocket 服务器    |</span></span>
<span class="line"><span>                     +----------+-----------+</span></span>
<span class="line"><span>                          ↗            ↖</span></span>
<span class="line"><span>   +------------------+---+----+------+------------------+</span></span>
<span class="line"><span>   |                  |        |      |                  |</span></span>
<span class="line"><span>+--+---+        +----+----+   |  +---+-------+    +-----+-----+</span></span>
<span class="line"><span>|语音  |        |         |   |  |           |    |           |</span></span>
<span class="line"><span>|输入  +-------&gt;| Claude  |&lt;--+--+  GPT-4o   |&lt;--&gt;|   Mem0    |</span></span>
<span class="line"><span>|模块  |        |  3.5    |      |   mini    |    |           |</span></span>
<span class="line"><span>+--+---+        +----+----+      +-----------+    +-----------+</span></span>
<span class="line"><span>   |                 |</span></span>
<span class="line"><span>   |                 v</span></span>
<span class="line"><span>   |            +----+----+</span></span>
<span class="line"><span>   |            |  语音   |</span></span>
<span class="line"><span>   +-----------&gt;|  输出   |</span></span>
<span class="line"><span>                |  模块   |</span></span>
<span class="line"><span>                +----+----+</span></span>
<span class="line"><span>                     |</span></span>
<span class="line"><span>          +----------+-----------+</span></span>
<span class="line"><span>          |                      |</span></span>
<span class="line"><span>     输出音频                 情感分析</span></span>
<span class="line"><span>          |                      |</span></span>
<span class="line"><span>          v                      v</span></span>
<span class="line"><span>    [通过 WS 返回]         [通过 WS 返回]</span></span>
<span class="line"><span>          |                      |</span></span>
<span class="line"><span>          +----------------------+</span></span>
<span class="line"><span>                     |</span></span>
<span class="line"><span>                     ↓</span></span>
<span class="line"><span>              实时返回给客户端</span></span></code></pre></div><h2 id="核心组件说明" tabindex="-1">核心组件说明 <a class="header-anchor" href="#核心组件说明" aria-label="Permalink to &quot;核心组件说明&quot;">​</a></h2><h3 id="_1-通信层" tabindex="-1">1. 通信层 <a class="header-anchor" href="#_1-通信层" aria-label="Permalink to &quot;1. 通信层&quot;">​</a></h3><ul><li>基于 WebSocket 的实时双向通信</li><li>确保角色反应的即时性和自然度</li><li>支持持续性对话流</li></ul><h3 id="_2-语音处理模块" tabindex="-1">2. 语音处理模块 <a class="header-anchor" href="#_2-语音处理模块" aria-label="Permalink to &quot;2. 语音处理模块&quot;">​</a></h3><ul><li><strong>Groq Whisper</strong>: 精准的语音识别，捕捉用户的每一句话</li><li><strong>Fish Audio</strong>: 高质量的音频处理，确保对话的流畅性</li><li>实时语音互动，营造真实的交谈体验</li></ul><h3 id="_3-ai-处理核心" tabindex="-1">3. AI 处理核心 <a class="header-anchor" href="#_3-ai-处理核心" aria-label="Permalink to &quot;3. AI 处理核心&quot;">​</a></h3><ul><li><p><strong>Claude 3.5</strong>:</p><ul><li>负责角色对话的生成和处理</li><li>确保回复符合角色设定</li><li>维持对话的连贯性和逻辑性</li></ul></li><li><p><strong>GPT-4o mini</strong>:</p><ul><li>深度的情感分析和理解</li><li>角色记忆的管理和调用</li><li>主动话题引导和互动</li><li>复杂场景的理解和响应</li></ul></li></ul><h3 id="_4-记忆系统" tabindex="-1">4. 记忆系统 <a class="header-anchor" href="#_4-记忆系统" aria-label="Permalink to &quot;4. 记忆系统&quot;">​</a></h3><ul><li>基于 Mem0 的深度记忆存储</li><li>记录并学习与用户的互动历史</li><li>构建角色专属的记忆数据库</li><li>实现类似人类的记忆检索和联想</li></ul><h2 id="特色功能" tabindex="-1">特色功能 <a class="header-anchor" href="#特色功能" aria-label="Permalink to &quot;特色功能&quot;">​</a></h2><ol><li><p><strong>沉浸式角色扮演</strong></p><ul><li>精确的角色性格还原</li><li>符合人设的对话风格</li><li>情境感知的互动体验</li></ul></li><li><p><strong>情感智能系统</strong></p><ul><li>细腻的情感理解能力</li><li>个性化的情感表达</li><li>根据场景调整互动策略</li></ul></li><li><p><strong>主动式互动</strong></p><ul><li>基于角色设定的主动对话</li><li>智能话题延展</li><li>自然的对话节奏把控</li></ul></li><li><p><strong>进化式记忆</strong></p><ul><li>持续成长的互动记忆</li><li>个性化的用户关系构建</li><li>长期记忆的积累与应用</li></ul></li></ol><h2 id="技术栈" tabindex="-1">技术栈 <a class="header-anchor" href="#技术栈" aria-label="Permalink to &quot;技术栈&quot;">​</a></h2><ul><li>React 客户端界面</li><li>WebSocket 实现实时通信</li><li>Groq Whisper 提供高精度语音识别</li><li>Claude 3.5 负责角色对话生成</li><li>GPT-4o mini 处理其它认知任务</li><li>Fish Audio 确保音频质量</li><li>Mem0 提供记忆存储系统</li><li>Node Express 提供 WS 和接口 服务</li></ul>`,20)]))}const m=s(p,[["render",e]]);export{d as __pageData,m as default};
