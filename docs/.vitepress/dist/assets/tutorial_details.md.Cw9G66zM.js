import{_ as a,c as i,a0 as e,o as t}from"./chunks/framework.p2VkXzrt.js";const n="/assets/5.BgmMG_Nh.png",c=JSON.parse('{"title":"部署方法","description":"","frontmatter":{},"headers":[],"relativePath":"tutorial_details.md","filePath":"tutorial_details.md"}'),l={name:"tutorial_details.md"};function h(p,s,r,d,k,o){return t(),i("div",null,s[0]||(s[0]=[e('<h1 id="部署方法" tabindex="-1">部署方法 <a class="header-anchor" href="#部署方法" aria-label="Permalink to &quot;部署方法&quot;">​</a></h1><h2 id="使用-zeabur-一键部署-推荐" tabindex="-1">使用 Zeabur 一键部署(推荐) <a class="header-anchor" href="#使用-zeabur-一键部署-推荐" aria-label="Permalink to &quot;使用 Zeabur 一键部署(推荐)&quot;">​</a></h2><p><a href="https://zeabur.com/templates/LMSUDW?referralCode=aipoet" target="_blank" rel="noreferrer"><img src="https://zeabur.com/button.svg" alt="Deploy on Zeabur"></a></p><h3 id="部署步骤" tabindex="-1">部署步骤 <a class="header-anchor" href="#部署步骤" aria-label="Permalink to &quot;部署步骤&quot;">​</a></h3><ol><li>点击上方的 &quot;Deploy on Zeabur&quot; 按钮</li><li>如果你还没有 Zeabur 账号，需要先<a href="https://zeabur.com?referralCode=aipoet" target="_blank" rel="noreferrer">注册</a>。如果需要让服务保持连续超过24小时的长久运行，需要花费$5开通Developer计划(可使用WildCard虚拟信用卡开通)</li><li>点击上方按钮一键部署到日本区域，等待部署完成，然后如下图，填写环境变量，最后再生成域名，你就可以通过 Zeabur 提供的域名访问你的应用了</li></ol><p><img src="'+n+`" alt="环境变量配置界面"></p><h3 id="环境变量配置说明" tabindex="-1">环境变量配置说明 <a class="header-anchor" href="#环境变量配置说明" aria-label="Permalink to &quot;环境变量配置说明&quot;">​</a></h3><table tabindex="0"><thead><tr><th>环境变量</th><th>说明</th></tr></thead><tbody><tr><td><code>VITE_AUTH_API_TOKEN</code></td><td>用于后端鉴权，请填写一个随机字符串，长度至少为8位</td></tr><tr><td><code>VITE_APP_DEFAULT_USERNAME</code></td><td>用于前端登录系统鉴权的用户名，以及让Amadeus识别你的身份</td></tr><tr><td><code>VITE_APP_LOGIN_PASSWORD</code></td><td>用于前端登录系统鉴权的密码</td></tr><tr><td><code>OPENAI_API_KEY</code></td><td>调用LLM的API Key，请填写章节LLM中获取的API Key</td></tr><tr><td><code>OPENAI_API_BASE_URL</code></td><td>调用LLM的API端点，请填写章节LLM中获取的API端点</td></tr><tr><td><code>OPENAI_API_MODEL</code></td><td>调用LLM的型号，必须使用claude-3-5-sonnet-20241022</td></tr><tr><td><code>AI_PROMPT</code></td><td>调用LLM的提示词，默认为&quot;使用命运石之门(steins gate)的牧濑红莉栖(kurisu),一个天才少女,性格傲娇,不喜欢被叫克里斯蒂娜&quot;</td></tr><tr><td><code>FISH_AUDIO_TOKEN</code></td><td>调用Fish Audio的API Key，请填写章节Fish Audio中获取的API Key</td></tr><tr><td><code>WHISPER_API_TOKEN</code></td><td>调用Whisper的API Key，请填写章节Groq中获取的API Key</td></tr><tr><td><code>WHISPER_API_ENDPOINT</code></td><td>调用Whisper的API端点，请填写章节Groq中获取的API端点</td></tr><tr><td><code>VOICE_ID</code></td><td>牧濑红莉栖的Fish Audio语音ID为4c0b21b2ddb247d8ba45a1c1e84afe64</td></tr><tr><td><code>MEM_KEY</code></td><td>用于调用Mem0的API Key，请填写章节Mem0中获取的API Key</td></tr></tbody></table><ul><li>确保你的项目符合 Zeabur 的部署要求</li><li>如果你需要自定义域名，可以在 Zeabur 的控制面板中进行设置</li><li>建议查看 <a href="https://zeabur.com/docs" target="_blank" rel="noreferrer">Zeabur 的官方文档</a> 获取更多部署相关信息</li></ul><h2 id="使用-docker-compose-部署" tabindex="-1">使用 Docker Compose 部署 <a class="header-anchor" href="#使用-docker-compose-部署" aria-label="Permalink to &quot;使用 Docker Compose 部署&quot;">​</a></h2><p>如果你想在自己的服务器上部署，可以使用 Docker Compose 进行部署。</p><h3 id="准备工作" tabindex="-1">准备工作 <a class="header-anchor" href="#准备工作" aria-label="Permalink to &quot;准备工作&quot;">​</a></h3><ol><li>确保你的服务器已安装 <a href="https://docs.docker.com/get-docker/" target="_blank" rel="noreferrer">Docker</a> 和 <a href="https://docs.docker.com/compose/install/" target="_blank" rel="noreferrer">Docker Compose</a></li><li>准备好所有必需的环境变量（参考上方环境变量配置说明）</li></ol><h3 id="docker-compose-配置" tabindex="-1">Docker Compose 配置 <a class="header-anchor" href="#docker-compose-配置" aria-label="Permalink to &quot;Docker Compose 配置&quot;">​</a></h3><p>创建 <code>docker-compose.yml</code> 文件，内容如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ghcr.io/ai-poet/amadeus-system-new-alpha</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3002:3002&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 服务端口</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">VITE_AUTH_API_TOKEN=\${VITE_AUTH_API_TOKEN}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">VITE_APP_DEFAULT_USERNAME=\${VITE_APP_DEFAULT_USERNAME}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">VITE_APP_LOGIN_PASSWORD=\${VITE_APP_LOGIN_PASSWORD}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">OPENAI_API_KEY=\${OPENAI_API_KEY}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">OPENAI_API_BASE_URL=\${OPENAI_API_BASE_URL}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">OPENAI_API_MODEL=\${OPENAI_API_MODEL}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">AI_PROMPT=\${AI_PROMPT}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">FISH_AUDIO_TOKEN=\${FISH_AUDIO_TOKEN}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">WHISPER_API_TOKEN=\${WHISPER_API_TOKEN}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">WHISPER_API_ENDPOINT=\${WHISPER_API_ENDPOINT}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">VOICE_ID=\${VOICE_ID}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MEM_KEY=\${MEM_KEY}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">unless-stopped</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    networks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">amadeus-network</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./logs:/app/service/logs</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 日志持久化存储</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">networks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  amadeus-network</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    driver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bridge</span></span></code></pre></div><h3 id="部署步骤-1" tabindex="-1">部署步骤 <a class="header-anchor" href="#部署步骤-1" aria-label="Permalink to &quot;部署步骤&quot;">​</a></h3><ol><li>创建 <code>.env</code> 文件，填入所需的环境变量</li><li>在 <code>docker-compose.yml</code> 所在目录运行：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre></div><ol start="3"><li>服务将在后台启动，可以通过以下命令查看日志：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span></span></code></pre></div>`,21)]))}const g=a(l,[["render",h]]);export{c as __pageData,g as default};
